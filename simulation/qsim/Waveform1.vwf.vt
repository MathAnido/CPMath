// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2019 15:01:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPMath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPMath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_enter;
reg clk_50Mhz;
reg reset;
reg [15:0] switch;
// wires                                               
wire [6:0] display0;
wire [6:0] display1;
wire [6:0] display2;
wire [4:0] estado;
wire [31:0] inputA;
wire [31:0] inputB;
wire [31:0] instrucao;
wire [31:0] pc;
wire [31:0] regIN;
wire signal;
wire [31:0] ula;

// assign statements (if any)                          
CPMath i1 (
// port map - connection between master ports and signals/registers   
	.btn_enter(btn_enter),
	.clk_50Mhz(clk_50Mhz),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.estado(estado),
	.inputA(inputA),
	.inputB(inputB),
	.instrucao(instrucao),
	.pc(pc),
	.regIN(regIN),
	.reset(reset),
	.signal(signal),
	.switch(switch),
	.ula(ula)
);
initial 
begin 
#1000000 $finish;
end 

// btn_enter
initial
begin
	btn_enter = 1'b0;
	btn_enter = #230000 1'b1;
	btn_enter = #20000 1'b0;
	btn_enter = #40000 1'b1;
	btn_enter = #20000 1'b0;
end 

// clk_50Mhz
always
begin
	clk_50Mhz = 1'b0;
	clk_50Mhz = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #30000 1'b0;
end 
// switch[ 15 ]
initial
begin
	switch[15] = 1'b0;
end 
// switch[ 14 ]
initial
begin
	switch[14] = 1'b0;
end 
// switch[ 13 ]
initial
begin
	switch[13] = 1'b0;
end 
// switch[ 12 ]
initial
begin
	switch[12] = 1'b0;
end 
// switch[ 11 ]
initial
begin
	switch[11] = 1'b0;
end 
// switch[ 10 ]
initial
begin
	switch[10] = 1'b0;
end 
// switch[ 9 ]
initial
begin
	switch[9] = 1'b0;
end 
// switch[ 8 ]
initial
begin
	switch[8] = 1'b0;
end 
// switch[ 7 ]
initial
begin
	switch[7] = 1'b0;
end 
// switch[ 6 ]
initial
begin
	switch[6] = 1'b0;
end 
// switch[ 5 ]
initial
begin
	switch[5] = 1'b0;
end 
// switch[ 4 ]
initial
begin
	switch[4] = 1'b0;
end 
// switch[ 3 ]
initial
begin
	switch[3] = 1'b0;
end 
// switch[ 2 ]
initial
begin
	switch[2] = 1'b0;
	switch[2] = #270000 1'b1;
	switch[2] = #70000 1'b0;
end 
// switch[ 1 ]
initial
begin
	switch[1] = 1'b0;
	switch[1] = #140000 1'b1;
	switch[1] = #130000 1'b0;
end 
// switch[ 0 ]
initial
begin
	switch[0] = 1'b0;
	switch[0] = #140000 1'b1;
	switch[0] = #130000 1'b0;
end 
endmodule

